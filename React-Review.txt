React - Review
- 자바스크립트 라이브러리, 메타(구 페이스북)
    => 프론트 프레임워크로도 불림
    => Vue, Angular, Svelt


- SPA(Single Page Application -> index.html 1개) : 강제사항은 아님!
    => 상황에 따라 몇개의 페이지를 나누어도 상관없음!


- 프로젝트 생성
    => 바닥부터 하지 않음 (필요한 라이브러리와 세팅이 많아서....)
    => Scafolding, boiler-plate, template 코드라고 불리는 곳에서 시작
    => Create-React-App (지금은 사용하지 않음, 심지어 페이스북에서도 안씀..)
    => Vite(Vue 만든 사람이 만든거) ---> 이걸 주로 사용!

    [ `npm create vite@latest . ` ] OR [ `npx create-vite@latest . `  ] 입력하기
        => npx : 굳이 설치 안하고 하겠다! 그대로 복붙하겠다! 

    [ npm i ] 입력 
        => 필요한 라이브러리 설치 'node_modules' 폴더 생성
    
    [ npm run dev ]
        => 개발 서버 실행
    
    [ 폴더 및 파일 정리 후 작업 시작 ]
        => 필요없는 것들이 들어있음


- 컴포넌트 기반 (리액트의 특징, 사실은 거의 모든 프레임워크가 추구하는 방향)
    JSX => 진짜 html 아니다
            {
                "h1",
                "children" : [요소들]
            }

    => 컴포넌트 제작 시 기존 html에서 필요한 부분만 훔쳐오기(아는거 가져오기)
        컴포넌트 라이브러리를 검색 활용해서 가져오기(문서를 읽어야함)
        복잡한 컴포넌트 TOP    -> DOWN 방식
        간단한 컴포넌트 Bottom -> Up 방식


- React 는 가상DOM 덕분에 훨씬 빠르게 느껴진다.
    => 가상DOM(Virtual DOM)은 <<< 가짜HTML이다 >>>를 꼭 기억하자
    => 브라주어의 실제 DOM을 제어하기 전에 메모리상 JSON 형태의 DOM에서 달라진 부분을 찾아서
    다라진 부분만 제어한다.(빠르다!)
    -----추가설명-------------------------------------
    => 실제 브라우저는 실제DOM이다!
    => JSON 파싱해주는 것은 가상DOM이다.
    => 가상DOM에서 테스트를 하고 실제 브라우저에는 메모리상에서 변경된 내용들만 가져다 꽂아준다.
    => 즉, 설계도면을 들고 "00동00호00방으로 가서 고치세요"하는 것과 같다.


- XML과 HTML 차이!
    => HTML < XML (XML의 한 부분이 HTML) 
    => "HTML 문서가 전달되는 것을 보고 전자문서라는 것을 생각해서 나온게 XML = B2B"

- 마커랭기지 (XML에 대한 배경설명)
    => 어떤 표시, 행동을 나타낼 수도 있고, 의미를 부여하는 것일수도 있다.

상태관리(필수)  useState =>  전역변수 관리 , Reactive 변수
                               => 이게 바뀌면 자동으로 Re-Rendering이 일어남!
                               => 어렵당~  낯설당~ 잘 응용해야겠당. 
                               => 원시타입, 객체타입([],{})일때는 새 객체를 주어야 바뀌었다고 인식!

Restful이 뭡니까?
get : 조회
post : 등록(생성)
put : 수정
delete : 삭제
(Front(UI서버) / Back(Data)서버를 분리되서 작업할 때 좋다! 
프론트와 백의 암묵적 약속! URL 합의! 각각 작업이 가능하다!
CSR => SPA => ajax
*** @Controller + @ResponseBody (=잭슨라이브러리동작)
		      + @RequestBode (=잭슨라이브러리동작)
*** @PathVariable


Restful client (same-origin) => fetch-built-in(ajax)로 구현
++ fetch는 폐쇄망에서 사용할 수 있기 때문에 사용법을 알아야한다!
++ axios는 폐쇄망에서 사용불가하기 때문에... 둘다 알아야한다!

// 다르면 뭐가 다른지? 생각하고 느낌을 느껴야 한다!
// 코드 구현 순서가 쪼메 달라짐
// 일반 실제 프로그램 사용자가 이 방식을 좋아함
// 화면 깜빡거림이 없어서 데스크탑 앱처럼 느껴진다(좋앙)
// 백과 프론트의 평화를 위해 URL 약속을 먼저 정해야한다! (혼자 한다면 상관없지만?!)
// URI 와 URL의 차이점 : URL은 URI의 하위 개념 "모든 URL은 URI다."


useState => 확장 => useReducer => 구조분해!!!!!!! 기억하기......
const [상태변수, dispatch] = useReducer(reducer, 초기값);
const [상태변수add, dispatchIdol] = useReducer(addReducer, 초기값);
===========>> 이미 설계가 되어있기 때문에 사용법을 명확히 알면 된다!

useRef "변수 관리(렌더링해도 값이 값이 유지된다!)
속성은 1개 => Current
대표적 사용 케이스 => DOM Element 레퍼런스
일반 전역변수 (리렌더링 발생하지 않음) 선언에도 이걸 사용할 수 있다!

tailwindcss "CSS 계의 게임 체인저!" 
==> 자동완성이된다.....!!!!!!!!!! VSCode에서!
==> 사용하다보면 익숙해진다!

useEffect 를 sideEffect : 비동기 처리 블록을 만들기 위해서
